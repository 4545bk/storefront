{"version":3,"sources":["../src/parseMultipartRequest.js"],"names":["parseMultipartRequest","body","contentType","s","fieldName","m","match","Error","boundary","Header_parse","header","headerFields","matchResult","name","rawStringToBuffer","str","idx","len","length","arr","Array","charCodeAt","Uint8Array","buffer","isRaw","view","String","fromCharCode","apply","parts","split","RegExp","partsByName","i","subparts","headers","j"],"mappings":";;;;;;;AAAA;;;;;AAIA;;;;;;;;;;AAUe,SAASA,qBAAT,CAA+BC,IAA/B,EAAqCC,WAArC,EAAkD;AAC/D,MAAIC,CAAJ,EAAOC,SAAP,CAD+D,CAG/D;AACA;AACA;;AACA,MAAIC,CAAC,GAAGH,WAAW,CAACI,KAAZ,CAAkB,iCAAlB,CAAR;;AAEA,MAAK,CAACD,CAAN,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAIC,QAAQ,GAAGH,CAAC,CAAC,CAAD,CAAD,IAAQA,CAAC,CAAC,CAAD,CAAxB;;AAEA,WAASI,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,WAAW,GAAGF,MAAM,CAACJ,KAAP,CAAa,oBAAb,CAAlB;AACA,QAAKM,WAAL,EAAmBD,YAAY,CAACE,IAAb,GAAoBD,WAAW,CAAC,CAAD,CAA/B;AACnB,WAAOD,YAAP;AACH;;AAED,WAASG,iBAAT,CAA4BC,GAA5B,EAAkC;AAC9B,QAAIC,GAAJ;AAAA,QAASC,GAAG,GAAGF,GAAG,CAACG,MAAnB;AAAA,QAA2BC,GAAG,GAAG,IAAIC,KAAJ,CAAWH,GAAX,CAAjC;;AACA,SAAMD,GAAG,GAAG,CAAZ,EAAgBA,GAAG,GAAGC,GAAtB,EAA4B,EAAED,GAA9B,EAAoC;AAChCG,MAAAA,GAAG,CAAEH,GAAF,CAAH,GAAaD,GAAG,CAACM,UAAJ,CAAeL,GAAf,IAAsB,IAAnC;AACH;;AACD,WAAO,IAAIM,UAAJ,CAAgBH,GAAhB,EAAsBI,MAA7B;AACH,GA3B8D,CA6B/D;;;AACA,MAAIf,QAAQ,GAAG,WAAWA,QAA1B;AAEA,MAAIgB,KAAK,GAAG,OAAOvB,IAAP,KAAiB,QAA7B;;AAEA,MAAKuB,KAAL,EAAa;AACT,QAAIC,IAAI,GAAG,IAAIH,UAAJ,CAAgBrB,IAAhB,CAAX;AACAE,IAAAA,CAAC,GAAGuB,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCH,IAAhC,CAAJ;AACH,GAHD,MAGO;AACHtB,IAAAA,CAAC,GAAGF,IAAJ;AACH,GAvC8D,CAyC/D;;;AACAE,EAAAA,CAAC,GAAG,SAASA,CAAb;AAEA,MAAI0B,KAAK,GAAG1B,CAAC,CAAC2B,KAAF,CAAQ,IAAIC,MAAJ,CAAWvB,QAAX,CAAR,CAAZ;AAAA,MACIwB,WAAW,GAAG,EADlB,CA5C+D,CA+C/D;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACJ,KAAK,CAACX,MAAN,GAAa,CAA7B,EAAgCe,CAAC,EAAjC,EAAqC;AACnC,QAAIC,QAAQ,GAAGL,KAAK,CAACI,CAAD,CAAL,CAASH,KAAT,CAAe,UAAf,CAAf;AACA,QAAIK,OAAO,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYJ,KAAZ,CAAkB,MAAlB,CAAd;;AACA,SAAK,IAAIM,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,OAAO,CAACjB,MAAxB,EAAgCkB,CAAC,EAAjC,EAAqC;AACnC,UAAIzB,YAAY,GAAGF,YAAY,CAAC0B,OAAO,CAACC,CAAD,CAAR,CAA/B;;AACA,UAAKzB,YAAY,CAACE,IAAlB,EAAyB;AACrBT,QAAAA,SAAS,GAAGO,YAAY,CAACE,IAAzB;AACH;AACF;;AAEDmB,IAAAA,WAAW,CAAC5B,SAAD,CAAX,GAAyBoB,KAAK,GAACV,iBAAiB,CAACoB,QAAQ,CAAC,CAAD,CAAT,CAAlB,GAAgCA,QAAQ,CAAC,CAAD,CAAtE;AACD;;AAED,SAAOF,WAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\n/** \n * AMP forms post using multipart/form-data encoding.  This function parses that format\n * into an object of key/value pairs\n * \n * Copyright@ 2013-2014 Wolfgang Kuehn, released under the MIT license.\n * \n * @param {String} body The raw body content\n * @param {String} contentType The content-type header\n * @return {Object} The form values\n */\nexport default function parseMultipartRequest(body, contentType) {\n  var s, fieldName;\n\n  // Examples for content types:\n  //      multipart/form-data; boundary=\"----7dd322351017c\"; ...\n  //      multipart/form-data; boundary=----7dd322351017c; ...\n  var m = contentType.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n\n  if ( !m ) {\n    throw new Error('Bad content-type header, no multipart boundary');\n  }\n\n  var boundary = m[1] || m[2];\n\n  function Header_parse(header) {\n      var headerFields = {};\n      var matchResult = header.match(/^.*name=\"([^\"]*)\"$/);\n      if ( matchResult ) headerFields.name = matchResult[1];\n      return headerFields;\n  }\n\n  function rawStringToBuffer( str ) {\n      var idx, len = str.length, arr = new Array( len );\n      for ( idx = 0 ; idx < len ; ++idx ) {\n          arr[ idx ] = str.charCodeAt(idx) & 0xFF;\n      }\n      return new Uint8Array( arr ).buffer;\n  }\n\n  // \\r\\n is part of the boundary.\n  var boundary = '\\r\\n--' + boundary;\n\n  var isRaw = typeof(body) !== 'string';\n\n  if ( isRaw ) {\n      var view = new Uint8Array( body );\n      s = String.fromCharCode.apply(null, view);\n  } else {\n      s = body;\n  }\n\n  // Prepend what has been stripped by the body parsing mechanism.\n  s = '\\r\\n' + s;\n\n  var parts = s.split(new RegExp(boundary)),\n      partsByName = {};\n\n  // First part is a preamble, last part is closing '--'\n  for (var i=1; i<parts.length-1; i++) {\n    var subparts = parts[i].split('\\r\\n\\r\\n');\n    var headers = subparts[0].split('\\r\\n');\n    for (var j=1; j<headers.length; j++) {\n      var headerFields = Header_parse(headers[j]);\n      if ( headerFields.name ) {\n          fieldName = headerFields.name;\n      }\n    }\n\n    partsByName[fieldName] = isRaw?rawStringToBuffer(subparts[1]):subparts[1];\n  }\n\n  return partsByName;\n}"],"file":"parseMultipartRequest.js"}