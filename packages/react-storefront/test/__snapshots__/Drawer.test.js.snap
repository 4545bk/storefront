// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Drawer accepts a className prop 1`] = `
<WithStyles(inject-Drawer) className="myClassName" onRequestClose={[Function]}>
  <inject-Drawer classes={{...}} className="myClassName" onRequestClose={[Function]}>
    <Drawer classes={{...}} className="myClassName" onRequestClose={[Function]} amp={[undefined]} ampStateId={[undefined]} showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
      <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind={{...}} open={[undefined]} variant={[undefined]} className="myClassName">
        <Drawer theme={{...}} classes={{...}} anchor="bottom" amp-bind={{...}} open={false} variant="temporary" className="myClassName" elevation={16} transitionDuration={{...}}>
          <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-modal-15 myClassName" open={false} onClose={[undefined]} amp-bind={{...}}>
            <Modal classes={{...}} BackdropProps={{...}} className="MuiDrawer-modal-15 myClassName" open={false} onClose={[undefined]} amp-bind={{...}} disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}} BackdropComponent={[Function: WithStyles]} />
          </WithStyles(Modal)>
        </Drawer>
      </WithStyles(Drawer)>
    </Drawer>
  </inject-Drawer>
</WithStyles(inject-Drawer)>
`;

exports[`Drawer accepts a paper class 1`] = `
<WithStyles(inject-Drawer) classes={{...}} onRequestClose={[Function]}>
  <inject-Drawer classes={{...}} onRequestClose={[Function]}>
    <Drawer classes={{...}} onRequestClose={[Function]} amp={[undefined]} ampStateId={[undefined]} showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
      <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind={{...}} open={[undefined]} variant={[undefined]}>
        <Drawer theme={{...}} classes={{...}} anchor="bottom" amp-bind={{...}} open={false} variant="temporary" elevation={16} transitionDuration={{...}}>
          <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-modal-15" open={false} onClose={[undefined]} amp-bind={{...}}>
            <Modal classes={{...}} BackdropProps={{...}} className="MuiDrawer-modal-15" open={false} onClose={[undefined]} amp-bind={{...}} disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}} BackdropComponent={[Function: WithStyles]} />
          </WithStyles(Modal)>
        </Drawer>
      </WithStyles(Drawer)>
    </Drawer>
  </inject-Drawer>
</WithStyles(inject-Drawer)>
`;

exports[`Drawer sets up amp-bind when ampBindClosed is set 1`] = `
<Provider app={{...}}>
  <inject-AmpState id="myState">
    <AmpState id="myState" amp={true} initialState={{...}}>
      <Provider ampStateId="myState">
        <HelmetWrapper defer={true} encodeSpecialCharacters={true}>
          <SideEffect(NullComponent) defer={true} encodeSpecialCharacters={true} script={{...}}>
            <NullComponent defer={true} encodeSpecialCharacters={true} script={{...}} />
          </SideEffect(NullComponent)>
        </HelmetWrapper>
        <amp-state id="myState">
          <script type="application/json" dangerouslySetInnerHTML={{...}} />
        </amp-state>
        <WithStyles(inject-Drawer) ampBindClosed="closed" onRequestClose={[Function]}>
          <inject-Drawer classes={{...}} ampBindClosed="closed" onRequestClose={[Function]}>
            <Drawer classes={{...}} ampBindClosed="closed" onRequestClose={[Function]} amp={true} ampStateId="myState" showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
              <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null" open={[undefined]} variant={[undefined]}>
                <Drawer theme={{...}} classes={{...}} anchor="bottom" amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null" open={false} variant="temporary" elevation={16} transitionDuration={{...}}>
                  <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-modal-15" open={false} onClose={[undefined]} amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null">
                    <Modal classes={{...}} BackdropProps={{...}} className="MuiDrawer-modal-15" open={false} onClose={[undefined]} amp-bind="class=>myState.closed ? \\'RSFDrawer-ampClosed-4\\' : null" disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}} BackdropComponent={[Function: WithStyles]} />
                  </WithStyles(Modal)>
                </Drawer>
              </WithStyles(Drawer)>
            </Drawer>
          </inject-Drawer>
        </WithStyles(inject-Drawer)>
      </Provider>
    </AmpState>
  </inject-AmpState>
</Provider>
`;

exports[`Drawer spreads props to the underlying MuiDrawer 1`] = `<inject-Drawer classes={{...}} open={true} onRequestClose={[Function]} />`;

exports[`Drawer uses a div for title 1`] = `
<WithStyles(inject-Drawer) open={true} title="Title" onRequestClose={[Function]}>
  <inject-Drawer classes={{...}} open={true} title="Title" onRequestClose={[Function]}>
    <Drawer classes={{...}} open={true} title="Title" onRequestClose={[Function]} amp={[undefined]} ampStateId={[undefined]} showCloseButton={true} autoAdjustBodyPadding={false} closeButtonProps={{...}}>
      <WithStyles(Drawer) anchor="bottom" classes={{...}} amp-bind={{...}} open={true} variant={[undefined]}>
        <Drawer theme={{...}} classes={{...}} anchor="bottom" amp-bind={{...}} open={true} variant="temporary" elevation={16} transitionDuration={{...}}>
          <WithStyles(Modal) BackdropProps={{...}} className="MuiDrawer-modal-15" open={true} onClose={[undefined]} amp-bind={{...}}>
            <Modal classes={{...}} BackdropProps={{...}} className="MuiDrawer-modal-15" open={true} onClose={[undefined]} amp-bind={{...}} disableAutoFocus={false} disableBackdropClick={false} disableEnforceFocus={false} disableEscapeKeyDown={false} disableRestoreFocus={false} hideBackdrop={false} keepMounted={false} manager={{...}} BackdropComponent={[Function: WithStyles]}>
              <Portal container={[undefined]} onRendered={[Function: value]}>
                <div className="MuiModal-root-16 MuiDrawer-modal-15" amp-bind={{...}}>
                  <WithStyles(Backdrop) open={true} onClick={[Function: value]} transitionDuration={{...}}>
                    <Backdrop classes={{...}} open={true} onClick={[Function: value]} transitionDuration={{...}} invisible={false}>
                      <WithTheme(Fade) appear={true} in={true} timeout={{...}} onClick={[Function: value]}>
                        <Fade theme={{...}} appear={true} in={true} timeout={{...}} onClick={[Function: value]}>
                          <Transition appear={true} onEnter={[Function: value]} onExit={[Function: value]} in={true} timeout={{...}} onClick={[Function: value]} mountOnEnter={false} unmountOnExit={false} enter={true} exit={true} onEntering={[Function: noop]} onEntered={[Function: noop]} onExiting={[Function: noop]} onExited={[Function: noop]}>
                            <div className="MuiBackdrop-root-18" aria-hidden="true" style={{...}} onClick={[Function: value]} />
                          </Transition>
                        </Fade>
                      </WithTheme(Fade)>
                    </Backdrop>
                  </WithStyles(Backdrop)>
                  <RootRef rootRef={[Function: rootRef]}>
                    <WithTheme(Slide) in={true} direction="up" timeout={{...}} appear={false} onExited={[Function: chainedFunction]} role="document" tabIndex="-1">
                      <Slide theme={{...}} in={true} direction="up" timeout={{...}} appear={false} onExited={[Function: chainedFunction]} role="document" tabIndex="-1">
                        <EventListener target="window" onResize={[Function: debounced]}>
                          <Transition onEnter={[Function: value]} onEntering={[Function: value]} onExit={[Function: value]} onExited={[Function: value]} appear={false} style={{...}} in={true} direction="up" timeout={{...}} role="document" tabIndex="-1" mountOnEnter={false} unmountOnExit={false} enter={true} exit={true} onEntered={[Function: noop]} onExiting={[Function: noop]}>
                            <WithStyles(Paper) elevation={16} square={true} className="MuiDrawer-paper-6 RSFDrawer-paper-2 MuiDrawer-paperAnchorBottom-10" style={{...}} direction="up" role="document" tabIndex="-1">
                              <Paper classes={{...}} elevation={16} square={true} className="MuiDrawer-paper-6 RSFDrawer-paper-2 MuiDrawer-paperAnchorBottom-10" style={{...}} direction="up" role="document" tabIndex="-1" component="div">
                                <div className="MuiPaper-root-20 MuiPaper-elevation16-38 MuiDrawer-paper-6 RSFDrawer-paper-2 MuiDrawer-paperAnchorBottom-10" style={{...}} direction="up" role="document" tabIndex="-1">
                                  <div>
                                    <div className="RSFDrawer-title-3">
                                      <WithStyles(Typography) variant="title" component="div">
                                        <Typography classes={{...}} variant="title" component="div" align="inherit" color="default" gutterBottom={false} headlineMapping={{...}} noWrap={false} paragraph={false}>
                                          <div className="MuiTypography-root-47 MuiTypography-title-53">
                                            Title
                                          </div>
                                        </Typography>
                                      </WithStyles(Typography)>
                                    </div>
                                    <WithStyles(Button) variant="fab" color="primary" className="RSFDrawer-closeButton-1" onClick={[Function]} style={{...}} on={{...}}>
                                      <Button classes={{...}} variant="fab" color="primary" className="RSFDrawer-closeButton-1" onClick={[Function]} style={{...}} on={{...}} disabled={false} disableFocusRipple={false} fullWidth={false} mini={false} size="medium" type="button">
                                        <WithStyles(ButtonBase) className="MuiButton-root-71 MuiButton-raised-77 MuiButton-fab-82 MuiButton-raisedPrimary-78 RSFDrawer-closeButton-1" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-80" onClick={[Function]} style={{...}} on={{...}} type="button">
                                          <ButtonBase classes={{...}} className="MuiButton-root-71 MuiButton-raised-77 MuiButton-fab-82 MuiButton-raisedPrimary-78 RSFDrawer-closeButton-1" disabled={false} focusRipple={true} focusVisibleClassName="MuiButton-focusVisible-80" onClick={[Function]} style={{...}} on={{...}} type="button" centerRipple={false} disableRipple={false} tabIndex="0">
                                            <button onBlur={[Function: handleEvent]} onFocus={[Function: value]} onKeyDown={[Function: value]} onKeyUp={[Function: value]} onMouseDown={[Function: handleEvent]} onMouseLeave={[Function: handleEvent]} onMouseUp={[Function: handleEvent]} onTouchEnd={[Function: handleEvent]} onTouchMove={[Function: handleEvent]} onTouchStart={[Function: handleEvent]} tabIndex="0" className="MuiButtonBase-root-87 MuiButton-root-71 MuiButton-raised-77 MuiButton-fab-82 MuiButton-raisedPrimary-78 RSFDrawer-closeButton-1" type="button" disabled={false} onClick={[Function]} style={{...}} on={{...}}>
                                              <span className="MuiButton-label-72">
                                                <pure(Close)>
                                                  <Close>
                                                    <WithStyles(SvgIcon)>
                                                      <SvgIcon classes={{...}} color="inherit" viewBox="0 0 24 24">
                                                        <svg className="MuiSvgIcon-root-90" focusable="false" viewBox="0 0 24 24" color={[undefined]} aria-hidden="true">
                                                          <g>
                                                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
                                                          </g>
                                                        </svg>
                                                      </SvgIcon>
                                                    </WithStyles(SvgIcon)>
                                                  </Close>
                                                </pure(Close)>
                                              </span>
                                              <WithStyles(TouchRipple) innerRef={[Function: value]} center={false}>
                                                <TouchRipple classes={{...}} center={false}>
                                                  <TransitionGroup component="span" enter={true} exit={true} className="MuiTouchRipple-root-96" childFactory={[Function: childFactory]}>
                                                    <span className="MuiTouchRipple-root-96" />
                                                  </TransitionGroup>
                                                </TouchRipple>
                                              </WithStyles(TouchRipple)>
                                            </button>
                                          </ButtonBase>
                                        </WithStyles(ButtonBase)>
                                      </Button>
                                    </WithStyles(Button)>
                                  </div>
                                </div>
                              </Paper>
                            </WithStyles(Paper)>
                          </Transition>
                        </EventListener>
                      </Slide>
                    </WithTheme(Slide)>
                  </RootRef>
                </div>
              </Portal>
            </Modal>
          </WithStyles(Modal)>
        </Drawer>
      </WithStyles(Drawer)>
    </Drawer>
  </inject-Drawer>
</WithStyles(inject-Drawer)>
`;
