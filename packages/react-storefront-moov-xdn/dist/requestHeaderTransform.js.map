{"version":3,"sources":["../src/requestHeaderTransform.js"],"names":["requestHeaderTransform","router","hostDomains","env","__static_origin_path__","secure","moovSkipUpstream","request","fns","export","JSON","stringify","headers","process","MOOV_ENV","willFetchFromUpstream","console","log","path","includes","host","header","source_host"],"mappings":";;;;;;;AAIA;;;;AAJA;;;;;AAMA;;;;;;;AAOe,SAASA,sBAAT,OAA4D;AAAA,MAA1BC,MAA0B,QAA1BA,MAA0B;AAAA,8BAAlBC,WAAkB;AAAA,MAAlBA,WAAkB,iCAAN,EAAM;;AACzE,MAAIC,GAAG,CAACC,sBAAR,EAAgC;AAC9B;AACA;AACD,GAHD,MAGO,IAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AAChC;AACA,WAAOC,gBAAgB,EAAvB;AACD,GAHM,MAGA;AACL,QAAMC,OAAO,GAAG,6BAAhB;AACAC,IAAAA,GAAG,CAACC,MAAJ,CAAW,SAAX,EAAsBC,IAAI,CAACC,SAAL,CAAeJ,OAAO,CAACK,OAAvB,CAAtB;AACAJ,IAAAA,GAAG,CAACC,MAAJ,CAAW,iBAAX,EAA8BI,OAAO,CAACV,GAAR,CAAYW,QAAZ,KAAyB,aAAzB,IAA0CP,OAAO,CAACK,OAAR,CAAgB,oBAAhB,KAAyC,IAAnF,GAA0F,OAA1F,GAAoG,MAAlI,EAHK,CAGqI;;AAE1I,QAAIX,MAAM,CAACc,qBAAP,CAA6BR,OAA7B,CAAJ,EAA2C;AACzC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,+BAAwDd,GAAG,CAACe,IAA5D;;AACA,UAAI,CAAChB,WAAW,CAACiB,QAAZ,CAAqBhB,GAAG,CAACiB,IAAzB,CAAL,EAAqC;AACnCR,QAAAA,OAAO,CAACS,MAAR,CAAe,MAAf,EAAuBlB,GAAG,CAACmB,WAA3B;AACD;AACF,KAND,MAMO;AACL;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,8BAAuDd,GAAG,CAACe,IAA3D;AACAZ,MAAAA,gBAAgB;AACjB;AACF;AACF","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\nimport createRequest from './createRequest'\n\n/**\n * Helper for moov_request_header_transform.js\n * @param {Router} options.router The app's router\n * @param {String[]} options.hostDomains An array containing the single domains on which the app is hosted.  \n *  When a proxyUpstream handler is used on one of these domains, the framework will not send the host header as\n *  part of the upstream request.\n */\nexport default function requestHeaderTransform({ router, hostDomains=[] }) {\n  if (env.__static_origin_path__) {\n    // always go upstream for static paths\n    return\n  } else if (env.secure !== \"true\") {\n    // don't bother going upstream if we're not using https, we're just going to redirect\n    return moovSkipUpstream()\n  } else {\n    const request = createRequest()\n    fns.export('headers', JSON.stringify(request.headers))\n    fns.export('behindOuterEdge', process.env.MOOV_ENV === 'development' || request.headers['x-moov-xdn-version'] == null ? 'false' : 'true') // needed in edgeResponseTransform.js\n  \n    if (router.willFetchFromUpstream(request)) {\n      // Adapt route\n      console.log('[react-storefront]', `going upstream for ${env.path}`)\n      if (!hostDomains.includes(env.host)) {\n        headers.header(\"host\", env.source_host)\n      }\n    } else {\n      // PWA route\n      console.log('[react-storefront]', `rendering PWA for ${env.path}`)\n      moovSkipUpstream()\n    }\n  }\n}\n"],"file":"requestHeaderTransform.js"}