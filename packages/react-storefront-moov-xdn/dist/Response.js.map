{"version":3,"sources":["../src/Response.js"],"names":["NO_CACHE_HEADER","Response","request","browserMaxAge","serverMaxAge","headers","global","statusCode","statusText","Number","body","_doRelayUpstreamCookies","fns","export","redirectTo","cookies","cache","sendResponse","htmlparsed","headersSent","set","JSON","send","stringify","shouldRelay","shouldRelayUpstreamCookies","cookiesByDomain","env","MUR_SET_COOKIES","domain","cookie","replace","upstream","injectDomain","app","hostname","push","name","value","match","shouldSendCookies","console","warn","Error","toLowerCase","code","text","maxAgeSeconds","url","status","idx","indexOf","substr","trim"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2018 Moov Corporation.  All rights reserved.\n */\n\n/**\n * The standard cache-control header value sent for all resources that are not to be cached.\n */\nexport const NO_CACHE_HEADER = 'no-cache'\n\n/**\n * Represents the response sent back from fromServer handlers.  Use this class to set headers, status,\n * and other response metadata.\n */\nexport default class Response {\n\n  /**\n   * When set, this determines the value of the location header\n   */\n  redirectTo = null\n\n  /**\n   * Set to false to prevent set-cookie headers returned from the upstream (proxied) site from\n   * being relayed to the browser\n   */\n  shouldRelayUpstreamCookies = true\n\n  /**\n   * This will be flipped to `true` when send is called.\n   */\n  headersSent = false\n\n  /**\n   * The application/json mime type\n   */\n  JSON = 'application/json'\n\n  /**\n   * The text/html mime type\n   */\n  HTML = 'text/html'\n\n  /**\n   * Response headers to send\n   */\n  headers = {}\n\n  /**\n   * The default cache settings for browser and server cache.  Override this by calling cacheOnServer\n   */\n  cache = {\n    browserMaxAge: 0,\n    serverMaxAge: 0\n  }\n\n  /**\n   * Cookies to set\n   */\n  cookies = []\n\n  constructor(request) {\n    this.request = request\n    let headers = global.headers || { statusCode: 200, statusText: 'OK' }\n    this.statusCode = Number(headers.statusCode)\n    this.statusText = headers.statusText\n  }\n\n  /**\n   * Sends response content\n   * @param {String} body The body of the response\n   * @return {Response} this\n   */\n  send(body) {\n    this._doRelayUpstreamCookies()\n\n    global.fns.export('MOOV_PWA_RESPONSE', {\n      statusCode: this.statusCode,\n      statusText: this.statusText,\n      redirectTo: this.redirectTo,\n      headers: this.headers, \n      cookies: this.cookies,\n      cache: this.cache\n    })\n\n    this.request.sendResponse({ body, htmlparsed: body != null })\n    this.headersSent = true\n    return this\n  }\n\n  /**\n   * Sends JSON data\n   * @param {Object} body Data\n   * @return {Response} this\n   */\n  json(body) {\n    return this\n      .set('content-type', this.JSON)\n      .send(JSON.stringify(body))\n  }\n\n  /**\n   * Configure whether or not set-cookie headers from upstream should be sent down to the browser\n   * @param {Boolean} shouldRelay True to relay upstream set-cookie headers to the browser, false to not\n   */\n  relayUpstreamCookies(shouldRelay) {\n    this.shouldRelayUpstreamCookies = shouldRelay\n    return this\n  }\n\n  /**\n   * Relays all set-cookie headers received from fetch requests back to the browser, \n   * translating each to the current domain.\n   * @private\n   */\n  _doRelayUpstreamCookies() {\n    const cookiesByDomain = env.MUR_SET_COOKIES\n\n    if (this.shouldRelayUpstreamCookies && cookiesByDomain) {\n      for (let domain in cookiesByDomain) {\n        for (let cookie of cookiesByDomain[domain]) {\n          // add a cookie for the current request's domain (for projects that don't have a proper DNS entry, for example localhost or moveapp.com)\n          cookie = cookie.replace(/Domain=[^;]*(;\\s*|\\s*$)/gi, '')\n          const upstream = injectDomain(cookie, domain)\n          const app = injectDomain(cookie, this.request.hostname)\n          this.cookies.push(upstream)\n          if (app !== upstream) this.cookies.push(cookie)\n        }\n      }\n    }\n  }\n  \n  /**\n   * Sets a response header\n   * @param {String} name\n   * @param {String} value\n   * @return {Response} this\n   */\n  set(name, value) {\n    if (name.match(/set-cookie/i) && !env.shouldSendCookies) {\n      console.warn('[react-storefront response]', 'Cannot set cookies on cached route')\n    }\n    if (name == null) throw new Error('name cannot be null in call to response.set')\n    this.headers[name] = value\n    return this\n  }\n\n  /**\n   * Gets the value of a header by name (case insensitive)\n   * @param {String} name \n   * @return {String} The header value\n   */\n  get(name) {\n    return this.headers[name.toLowerCase()]\n  }\n\n  /**\n   * Sets the response status\n   * @param {String} code \n   * @param {String} text \n   * @return {Response} this\n   */\n  status(code, text) {\n    this.statusCode = code\n    this.statusText = text\n    return this\n  }\n\n  /**\n   * Caches the response on the server\n   * @param {Number} maxAgeSeconds The time the entry should live in the cache in seconds\n   * @return {Response} this\n   */\n  cacheOnServer(maxAgeSeconds) {\n    if (maxAgeSeconds == null) throw new Error('maxAgeSeconds cannot be null in call to response.cacheOnServer')\n    \n    this.cache = {\n      serverMaxAge: maxAgeSeconds,\n      browserMaxAge: 0\n    }\n\n    return this\n  }\n\n  /**\n   * Sends a redirect to the specified URL\n   * @param {String} url A url\n   * @param {Number} status The http status code to send\n   * @return {Response} this\n   */\n  redirect(url, status=301) {\n    if (url == null) throw new Error('url cannot be null in call to response.redirect')\n    this.redirectTo = url\n    this.statusCode = status\n    this.send()\n    return this\n  }\n\n}\n\n/**\n * Injects a domain into a set-cookie header\n * @param {String} cookie \n * @param {String} domain\n * @return {String} \n */\nfunction injectDomain(cookie, domain) {\n  const idx = cookie.indexOf(';') + 1\n  return `${cookie.substr(0, idx)} Domain=${domain}; ${cookie.substr(idx).trim()}`\n}"],"file":"Response.js"}